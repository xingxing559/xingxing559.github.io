(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{587:function(t,s,a){"use strict";a.r(s);var e=a(5),_=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_39-二次封装-小结与思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39-二次封装-小结与思考"}},[t._v("#")]),t._v(" 39. 二次封装-小结与思考")]),t._v(" "),a("p",[t._v("OK ，三章的实战结束，小伙伴们也应该跟着小册完成了一个简单的二次封装了吧。内容不是很多，重在设计和思想，小册提取了其中最核心的几条，帮助小伙伴们回顾和发散思考：")]),t._v(" "),a("ol",[a("li",[t._v("通用的单表 CRUD ，重在数据库表和实体类的元信息提取")]),t._v(" "),a("li",[t._v("元信息的预提取，并统一集中保存，可以减少反射造成的性能开销（拿空间换时间）")]),t._v(" "),a("li",[t._v("注解 + 反射可以完成元信息的定义、解析")]),t._v(" "),a("li",[t._v("通用抽取在设计时，要尽可能的考虑到通用性和可扩展性，尽量满足设计模式的几大原则")])]),t._v(" "),a("p",[t._v("另外，有关更强大的封装参考，小伙伴们可以多研究一下 "),a("code",[t._v("tk.mapper")]),t._v(" 通用 Mapper 这个框架，它就是基于 MyBatis 做的中轻度二次封装，阿熊我个人也比较支持这个框架，它的源码还是比较值得小伙伴们学习的。")]),t._v(" "),a("blockquote",[a("p",[t._v("尽量不要看 MyBatisPlus ，不是说 MyBatisPlus 不好（我自己开发的项目中常用），是因为 MyBatisPlus 直接从底层给 MyBatis 动刀子了，篡改了 MyBatis 原本的设计。阿熊的意思是，我们自己在进行框架的二次封装时，最好是尽可能的在框架的基础之上做扩展和增强，而不是破坏 / 重写原有的底层设计和机制，来匹配自身的需求，如果只是自己用还好，如果涉及到多个人、多个项目、多个团队，那可能会引起一些不必要的麻烦，那就得不偿失了。")])]),t._v(" "),a("p",[t._v("OK ，有关二次封装的其他 idea ，小伙伴们可以在评论区，或者在小册交流群中跟我提建议，我觉得不错的设计，可以考虑在小册的最后追加加餐内容哈。")])])}),[],!1,null,null,null);s.default=_.exports}}]);