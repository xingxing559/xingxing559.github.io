(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{577:function(e,a,t){"use strict";t.r(a);var v=t(5),_=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_30-生命周期-小结与思考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30-生命周期-小结与思考"}},[e._v("#")]),e._v(" 30. 生命周期-小结与思考")]),e._v(" "),t("p",[e._v("恭喜各位小伙伴，经过 22 到 29 一共 8 章的学习，我们总算是啃下了 MyBatis 的生命周期部分，内容很多，而且重点也不少，本章我们就其中重要的部分作一个回顾，帮助各位小伙伴强化记忆。")]),e._v(" "),t("p",[e._v("我们先把最开始的那张架构流程图放在这里，小伙伴们可以回顾一下，想一想这些流程中都发生了哪些重要的部分：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f77ebd246014a3cb9d837c86d4d8f2a~tplv-k3u1fbpfcp-watermark.awebp",alt:"22. MyBatis整体架构.png"}})]),e._v(" "),t("h2",{attrs:{id:"_1-全局配置文件加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局配置文件加载"}},[e._v("#")]),e._v(" 1. 全局配置文件加载")]),e._v(" "),t("p",[e._v("加载 MyBatis 配置文件是第一步，它会将我们事先编写好并且传进去的 MyBatis 全局配置文件读取并解析，最终生成 "),t("code",[e._v("SqlSessionFactory")]),e._v(" 。当然我们知道，这里面最最根本的核心是 MyBatis 的全局 "),t("code",[e._v("Configuration")]),e._v(" 对象，它内部包含了"),t("strong",[e._v("配置项、对象工厂、类型处理器 "),t("code",[e._v("TypeHandler")]),e._v(" 、数据库环境、插件")]),e._v("，以及最重要的 "),t("strong",[t("code",[e._v("MappedStatement")])]),e._v(" 。")]),e._v(" "),t("p",[e._v("配置文件的内容解析，重要的环节包括以下几步：")]),e._v(" "),t("ul",[t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("typeAliasesElement\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("- 配置类型别名")]),e._v(" "),t("ul",[t("li",[e._v("这里面包含了我们自己声明的类型别名，它可以是一个一个的声明，也可以是包扫描的形式")])])]),e._v(" "),t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("settingsElement\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("- 应用配置项")]),e._v(" "),t("ul",[t("li",[e._v("这里面包含了非常多的预设配置，具体的内容可以参考 MyBatis 的官方文档，小册不展开啰嗦了")])])]),e._v(" "),t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("environmentsElement\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("- 数据源、事务管理器的配置")]),e._v(" "),t("ul",[t("li",[e._v("此处会把 MyBatis 要连接的数据源，以及事务工厂都配置好，并在底层初始化好")])])]),e._v(" "),t("li",[t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("mapperElement\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("- 解析")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("mapper.xml\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("和注解 Mapper 接口")]),e._v(" "),t("ul",[t("li",[e._v("最最重要的步骤")])])])]),e._v(" "),t("h2",{attrs:{id:"_2-加载mapper-xml与注解mapper接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-加载mapper-xml与注解mapper接口"}},[e._v("#")]),e._v(" 2. 加载mapper.xml与注解Mapper接口")]),e._v(" "),t("p",[e._v("mapper.xml 和注解 Mapper 接口的解析，它的重要性我们都非常清楚了，所以把它独立为一个步骤也不为过。")]),e._v(" "),t("p",[e._v("解析 mapper.xml 的时候，我们都是一个一个的配置，其中它解析的过程也是由几个重要的步骤组成：")]),e._v(" "),t("ul",[t("li",[e._v("命名空间的提取\n"),t("ul",[t("li",[e._v("命名空间可以对应 Mapper 接口，借此机会可以将对应的 Mapper 接口一并找出")])])]),e._v(" "),t("li",[e._v("缓存的配置\n"),t("ul",[t("li",[e._v("二级缓存的配置在此配置")])])]),e._v(" "),t("li",[e._v("resultMap 的提取\n"),t("ul",[t("li",[e._v("最最强大的结果集封装配置，此处会将 mapper.xml 中定义的 "),t("code",[e._v("<resultMap>")]),e._v(" 都封装好")])])]),e._v(" "),t("li",[e._v("SQL 片段的处理\n"),t("ul",[t("li",[e._v("公用 SQL 片段可以被所有 mapper 使用，它会存放到一个单独的 "),t("code",[e._v("Map")]),e._v(" 中")])])]),e._v(" "),t("li",[e._v("statement 的构建\n"),t("ul",[t("li",[e._v("statement 的解析，会提取四种核心标签的属性，以及内部动态 SQL 的封装，最终构建为一个 "),t("code",[e._v("MappedStatement")])])])])]),e._v(" "),t("p",[e._v("注解 Mapper 接口的解析逻辑，与 mapper.xml 的解析逻辑大致相同，也是几个重要的步骤：")]),e._v(" "),t("ul",[t("li",[e._v("前置检查\n"),t("ul",[t("li",[e._v("接口的检查、重复解析的检查（ mapper.xml 的解析中会 寻找命名空间对应的 Mapper 接口，一并处理）")])])]),e._v(" "),t("li",[e._v("加载接口对应的 mapper.xml\n"),t("ul",[t("li",[e._v("如果严格按照注解 Mapper 动态代理的方式开发工程，则这里可以关联到对应的 mapper.xml 并解析")])])]),e._v(" "),t("li",[e._v("注解二级缓存配置的解析\n"),t("ul",[t("li",[e._v("二级缓存同样可以在注解 Mapper 接口上声明")])])]),e._v(" "),t("li",[e._v("注解配置 ResultMap 的解析\n"),t("ul",[t("li",[e._v("resultMap 也可以在注解 Mapper 接口上声明，不过虽然如此，我们一般不会那么干（知道就 OK ）")])])]),e._v(" "),t("li",[e._v("注解 Statement 的解析\n"),t("ul",[t("li",[e._v("一个带注解的方法就是一个Statement ，此处也会把这些方法都封装为 "),t("code",[e._v("MappedStatement")])])])])]),e._v(" "),t("p",[e._v("mapper.xml 和注解 Mapper 接口都处理完成后，MyBatis 的初始化部分也就完成了。")]),e._v(" "),t("h2",{attrs:{id:"_3-一个查询动作的全流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-一个查询动作的全流程"}},[e._v("#")]),e._v(" 3. 一个查询动作的全流程")]),e._v(" "),t("p",[e._v("MyBatis 的运行期执行，是我们通过操作 "),t("code",[e._v("SqlSession")]),e._v(" 的方法，底层由 "),t("code",[e._v("Executor")]),e._v(" 实际负责工作。")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("SqlSession")]),e._v(" 会根据查询的 "),t("code",[e._v("statementId")]),e._v(" 找出对应的 "),t("code",[e._v("MappedStatement")]),e._v(" ，之后交予 "),t("code",[e._v("Executor")]),e._v(" 继续后面的工作")]),e._v(" "),t("li",[t("code",[e._v("Executor")]),e._v(" 会根据查询的数据请求，决定要不要走二级缓存（此处干活的是 "),t("code",[e._v("CachingExecutor")]),e._v(" ），如果需要走二级缓存，则尝试从二级缓存中获取，获取不到则进行下一步数据库查询")]),e._v(" "),t("li",[e._v("进行数据库查询之前，"),t("code",[e._v("Executor")]),e._v(" 会构建缓存键（用于一级缓存），并尝试从一级缓存中获取数据，获取不到则执行数据库查询")]),e._v(" "),t("li",[e._v("数据库查询的动作中，"),t("code",[e._v("Executor")]),e._v(" 会先创建出 "),t("code",[e._v("StatementHandler")]),e._v(" ，用于构建 "),t("code",[e._v("PreparedStatement")]),e._v(" 并构造 SQL 和封装参数")]),e._v(" "),t("li",[e._v("封装参数后，发送 SQL 语句，并借助 "),t("code",[e._v("ResultSetHandler")]),e._v(" 封装结果集，最后返回给客户端")])]),e._v(" "),t("p",[e._v("以上是粗略的一个查询动作的执行全流程，之所以总结的比较粗糙，是为了让小伙伴们能在整体上把握住 Mybatis 的执行流程，落实到细节处，小伙伴们可以根据自己要探究的重点，自行深入。")]),e._v(" "),t("p",[e._v("【相信经过生命周期部分的洗礼后，各位小伙伴都对 MyBatis 都有一个更为深刻的认识了吧。接下来的四章，我们来看看 MyBatis 的设计中都涉及了哪些经典的设计模式，从另一个不同的角度，我们来重新看一下 MyBatis 的设计】")])])}),[],!1,null,null,null);a.default=_.exports}}]);